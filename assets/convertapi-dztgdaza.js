class c{constructor(e,t){this.name=e,this.value=t}get dto(){return Promise.resolve({Name:this.name,Value:this.value})}}class o{constructor(e,t){this.name=e,this.fileId=t}}class l{constructor(e,t,s){this.name=e,this.file=t,this.host=s}value(){if(this.file instanceof o)return Promise.resolve(this.file.fileId);{let e=`https://${this.host}/upload?`;return(this.file instanceof URL?fetch(`${e}url=${encodeURIComponent(this.file.href)}`,{method:"POST"}):fetch(`${e}filename=${encodeURIComponent(this.file.name)}`,{method:"POST",body:this.file})).then(s=>s.ok?s.json():Promise.reject({Code:5007,Message:"Unable to upload the file"})).then(s=>s.FileId)}}get dto(){return this.value().then(e=>({Name:this.name,FileValue:{Id:e}}))}}class h{constructor(e){this.files=e}asArray(){return this.files.map(e=>new o(e.FileName,e.FileId))}}class m{constructor(e,t,s){this.name=e,this.fileValPros=[],t instanceof FileList?this.fileValPros=Array.from(t).map(i=>new l(e,i,s).value().then(r=>({Id:r}))):t instanceof h?this.fileValPros=t.asArray().map(i=>Promise.resolve({Id:i.fileId})):this.fileValPros=t.map(i=>Promise.resolve(i instanceof URL?{Url:i.href}:{Id:i}))}get dto(){return Promise.all(this.fileValPros).then(e=>({Name:this.name,FileValues:e}))}}class u{constructor(e,t){this.host=e,this.params=[];let s;t==null||t.forEach(i=>{i.isFile?typeof i.value=="string"?s=new l(i.name,new o("",i.value),this.host):s=i.value instanceof Array?new m(i.name,i.value,this.host):s=new l(i.name,i.value,this.host):s=new c(i.name,i.value),this.params.push(s)})}add(e,t){let s;return t instanceof h||t instanceof FileList||t instanceof Array?s=new m(e,t,this.host):t instanceof o||t instanceof File||t instanceof URL?s=new l(e,t,this.host):s=new c(e,t),this.params.push(s),s}get(e){return this.params.find(t=>t.name===e)}delete(e){let t=this.params.findIndex(s=>s.name===e);return this.params.splice(t,1)[0]}get dto(){let e=this.params.map(t=>t.dto);return Promise.all(e).then(t=>({Parameters:t}))}}class f{constructor(e){this.dto=e}get duration(){return this.dto.ConversionCost}get files(){return this.dto.Files}toParamFile(e=0){return new o(this.dto.Files[e].FileName,this.dto.Files[e].FileId)}toParamFiles(){return new h(this.dto.Files)}uploadToS3(e,t,s,i){return this.dto.Files.map(r=>{let n={region:e,bucket:t,accessKeyId:s,secretAccessKey:i,fileId:r.FileId};return fetch("https://integration.convertapi.com/s3/upload",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(n)})})}}class d{static auth(e,t){return new d(e,t)}constructor(e,t="v2.convertapi.com"){this.authCredentials=e,this.host=t}createParams(e){return new u(this.host,e)}convert(e,t,s){return Promise.resolve(s.dto).then(i=>fetch(`https://${this.host}/convert/${e}/to/${t}?storefile=true`,{method:"POST",headers:{"content-type":"application/json",authorization:`Bearer ${this.authCredentials}`},body:JSON.stringify(i)}).then(r=>Promise.all([r.ok,r.json()])).then(([r,n])=>r?n:Promise.reject(n)).then(r=>new f(r)))}}export{d as C};
